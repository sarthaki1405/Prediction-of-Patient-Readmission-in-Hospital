# -*- coding: utf-8 -*-
"""MP-DataVisualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1powf2ykr5xMjCHPkf6blMTO9ylc9cnaS
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv("/content/diabetic_data.csv")
df.head(10).T

df.shape

df.dtypes

'''
Checking missing values in dataset
missing values are represented as ?
'''
for col in df.columns:
  if df[col].dtype==object:
    print(col,df[col][df[col]=='?'].count())

print('gender',df['gender'][df['gender']=='Unkown/Invalid'].count())

'''
dealing with missing values
missing values are dropped
reason: variable weight contains approximate 98% of the missing values
missing value percentage in variable player code and medical specialit around 40%
so also dropped

Variables race, diag_1, diag_2, diag_3 and gender contains very less missing values as compared to other attributes which we dropped so for these attributes we also decided to drop those where missing values contains.
'''

df=df.drop(['weight','payer_code', 'medical_specialty'], axis=1)

drop_Idx = set(df[(df['diag_1'] == '?') & (df['diag_2'] == '?') & (df['diag_3'] == '?')].index)

drop_Idx = drop_Idx.union(set(df['diag_1'][df['diag_1'] == '?'].index))
drop_Idx = drop_Idx.union(set(df['diag_2'][df['diag_2'] == '?'].index))
drop_Idx = drop_Idx.union(set(df['diag_3'][df['diag_3'] == '?'].index))
drop_Idx = drop_Idx.union(set(df['race'][df['race'] == '?'].index))
drop_Idx = drop_Idx.union(set(df[df['discharge_disposition_id'] == 11].index))
drop_Idx = drop_Idx.union(set(df['gender'][df['gender'] == 'Unknown/Invalid'].index))
new_Idx = list(set(df.index) - set(drop_Idx))
df = df.iloc[new_Idx]

'''
variables (drugs named citoglipton and examide), all records have the same value. So essentially these cannot provide any interpretive or discriminatory information for predicting readmission so we decided to drop these two variables
'''
df = df.drop(['citoglipton', 'examide'], axis = 1)

#Checking for missing values in the data
for col in df.columns:
    if df[col].dtype == object:
         print(col,df[col][df[col] == '?'].count())

print('gender', df['gender'][df['gender'] == 'Unknown/Invalid'].count())

#value=df.get('number_inpatient')

#print(value)

value = df['number_inpatient'].mean()
print("Average of number inpatient:", value)
value1 = df['number_emergency'].mean()
value2 = df['number_outpatient'].mean()
print("Average number_emergency visits:", value1)
print("Average number_outpatient visits: ", value2)
value3=df['time_in_hospital'].mean()
print("Average time (in days) in hospital: ", value3)

# Convert the age ranges to their midpoints
midpoints = []
for age_range in df['age']:
    start, end = age_range.strip('[)').split('-')
    midpoint = (int(start) + int(end)) / 2
    midpoints.append(midpoint)

# Calculate the average of the midpoints
average_age = sum(midpoints) / len(midpoints)
print(average_age)

gender_counts = df.groupby('gender').size()
gender_counts.plot(kind='pie', autopct='%1.1f%%')
plt.title('Gender Distribution')
plt.show()

race_counts = df.groupby('race').size()
race_counts.plot(kind='pie', autopct='%1.1f%%')
plt.title('Race Distribution')
plt.show()

age_counts = df.groupby('age').size()
age_counts.plot(kind='pie', autopct='%1.1f%%')
plt.title('Age Distribution')
plt.show()

print(df.columns)

#sns.catplot(x="Gender", y="num_medications", hue="Type of Drugs", kind="bar", data=df)
sns.catplot(x="age", y="num_medications", kind="bar", data=df)

sns.catplot(x="age", y="num_medications", hue="gender", kind="bar", data=df)

sns.catplot(x="variable", y="value", kind="bar", data=pd.melt(df[["time_in_hospital", "num_lab_procedures", "num_procedures", "num_medications", "number_outpatient", "number_emergency", "number_inpatient", "number_diagnoses"]]))

fig = plt.figure(figsize = (6, 4))
title = fig.suptitle("time in hospital", fontsize=14)
fig.subplots_adjust(top=0.85, wspace=0.3)

ax1 = fig.add_subplot(1,1, 1)
ax1.set_xlabel("time_in_hospital")
ax1.set_ylabel("Frequency")
sns.kdeplot(df['time_in_hospital'], ax=ax1, shade=True, color='steelblue')

cols = ['num_lab_procedures', 'num_procedures', 'num_medications', 'number_diagnoses']
pp = sns.pairplot(df[cols], size=1.8, aspect=1.8,
                  plot_kws=dict(edgecolor="k", linewidth=0.5),
                  diag_kind="kde", diag_kws=dict(shade=True))

fig = pp.fig
fig.subplots_adjust(top=0.93, wspace=0.3)
t = fig.suptitle('Pairwise Plots', fontsize=14)

-df.hist(bins=15, color='steelblue', edgecolor='black', linewidth=1.0,
           xlabelsize=8, ylabelsize=8, grid=False)
plt.tight_layout(rect=(0, 0, 1.2, 1.2))

f, ax = plt.subplots(figsize=(10, 6))
corr = df.corr()
hm = sns.heatmap(round(corr,2), annot=True, ax=ax, cmap="coolwarm",fmt='.2f',
                 linewidths=.05)
f.subplots_adjust(top=0.93)
t= f.suptitle('Correlation Heatmap', fontsize=14)

fig, ax = plt.subplots()
ax.bar(df.index, df["time_in_hospital"], width=0.4, color="blue", label="Time in Hospital")
ax.bar(df.index + 0.4, df["num_lab_procedures"], width=0.4, color="red", label="Number of Lab Procedures")
ax.bar(df.index + 0.8, df["num_procedures"], width=0.4, color="green", label="Number of Procedures")
ax.bar(df.index + 1.2, df["num_medications"], width=0.4, color="orange", label="Number of Medications")
ax.bar(df.index + 1.6, df["number_outpatient"], width=0.4, color="purple", label="Number of Outpatient Visits")
ax.bar(df.index + 2.0, df["number_emergency"], width=0.4, color="brown", label="Number of Emergency Visits")
ax.bar(df.index + 2.4, df["number_inpatient"], width=0.4, color="pink", label="Number of Inpatient Visits")
ax.bar(df.index + 2.8, df["number_diagnoses"], width=0.4, color="gray", label="Number of Diagnoses")

# Set the x-axis labels
ax.set_xticks(df.index + 1.4)
ax.set_xticklabels(df["patient_nbr"])

# Set the y-axis label
ax.set_ylabel("Value")

# Add the legend
ax.legend()

# Show the graph
plt.show()

# Replace non-'NO' values in 'readmitted' column with 'YES'
df['readmitted'] = df['readmitted']
#.replace(['NO'], 'NO')

# Group data by 'age', 'gender', and 'readmitted' columns and count the number of 'YES' and 'NO' values for each group
ct = pd.crosstab([df['age'], df['gender']], df['readmitted'])

# Plot the resulting dataframe as a stacked bar chart
ct.plot.bar(stacked=True)

# Add labels and title to the chart
plt.xlabel('Age and Gender')
plt.ylabel('Number of Patients')
plt.title('Relationship between Age, Gender, and Readmission Status')
plt.show()

"""FEATURE ENGINEERING"""

df['service_utilization'] = df['number_outpatient'] + df['number_emergency'] + df['number_inpatient']

keys = ['metformin', 'repaglinide', 'nateglinide', 'chlorpropamide', 'glimepiride', 'glipizide', 'glyburide', 'pioglitazone', 'rosiglitazone', 'acarbose', 'miglitol', 'insulin', 'glyburide-metformin', 'tolazamide', 'metformin-pioglitazone','metformin-rosiglitazone', 'glimepiride-pioglitazone', 'glipizide-metformin', 'troglitazone', 'tolbutamide', 'acetohexamide']
for col in keys:
    colname = str(col) + 'temp'
    df[colname] = df[col].apply(lambda x: 0 if (x == 'No' or x == 'Steady') else 1)
df['numchange'] = 0
for col in keys:
    colname = str(col) + 'temp'
    df['numchange'] = df['numchange'] + df[colname]
    del df[colname]

df['numchange'].value_counts()

